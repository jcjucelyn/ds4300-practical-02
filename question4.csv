LLM,Vector DB,Embedding Type,System Prompt,Speed (s),Memory (MB),Response
llama3.2,chroma,all-MiniLM-L6-v2,"You are a helpful AI assistant. Use the following context to answer the query as accurately as possible. If the context is not relevant to the query, say ""I do not know"".",15.782,0.128,"The `$regex` operator in MongoDB is used for regular expression matching. It allows you to search for documents where certain conditions are met, based on patterns specified using a regular expression.

Here's an example:

Suppose we have a collection called `customers` with a field `name`, and we want to find all customers whose name starts with 'T'.

```javascript
data = demodb.customers.find({""name"": {""$regex"": ""^T.*""}}, {""_id"": 0, ""name"": 1, ""rating"":1})
```

In this example, the regular expression `^T.*` is used. Here's a breakdown of what it means:

- `^` matches the beginning of the line.
- `T` matches the literal character 'T'.
- `.*` matches any single character except newline (the dot `.` in regex stands for ""any character""). The `*` after it means zero or more occurrences of the previous character.

So, the regular expression `^T.*` will match strings that start with 'T', followed by any characters. This is equivalent to the SQL LIKE operator `LIKE 'T%'`."
llama3.2,chroma,all-MiniLM-L6-v2,You are an expert in technical writing and software engineering.,15.176,0.104,"In MongoDB, the `$regex` operator is used for regular expression matching. It allows you to perform more complex queries by matching patterns against document fields using regular expressions.

The `$regex` operator takes two arguments:

1. The first argument is the regular expression pattern that you want to match.
2. The second argument is an optional flag that specifies the type of matching to perform (e.g., `$regex` for whole word matching, or `$regexi` for case-insensitive matching).

Here's an example:
```javascript
data = demodb.customers.find({""name"": {""$regex"": ""^T.*""}}, {""_id"": 0, ""name"": 1, ""rating"":1})
```
In this example, the regular expression pattern `^T.*` is used to match documents where the value of the `name` field starts with the literal character `T`.

Breaking down the pattern:

* `^` matches the beginning of the line.
* `T` matches the literal character `T`.
* `.*` matches any single character except newline (`*` is a special character in regular expressions that matches zero or more occurrences of the preceding element, and `.` matches any single character except newline).

So, this pattern will match documents where the `name` field starts with `T`, regardless of what comes after it."
llama3.2,chroma,all-MiniLM-L6-v2,You are a professor explaining concepts to a student.,19.26,0.107,"An excellent question, my student! The `$regex` operator is a powerful tool in MongoDB queries that allows you to perform regular expression searches on your data.

In essence, the `$regex` operator takes a regular expression pattern as its value and matches any string in the document that conforms to that pattern. You can use it to search for patterns in strings, dates, or even IP addresses.

Let's take a look at an example:

Suppose we have a collection called `customers`, and we want to find all customers whose name starts with 'T'. We can use the `$regex` operator like this:
```
data = demodb.customers.find({""name"": {""$regex"": ""^T.*""}}, {""_id"": 0, ""name"": 1, ""rating"":1})
```
In this example, we're using the regular expression pattern `^T.*`. Here's what each part of this pattern does:

* `^` matches the beginning of the string.
* `T` matches the literal character 'T'.
* `.*` matches any single character (except newline) zero or more times.

So, the regular expression `^T.*` effectively matches any string that starts with 'T'. The MongoDB query will return all customers whose name starts with 'T', regardless of how many characters follow.

In contrast, if we used the `LIKE` operator from SQL, it would match strings that start with 'T' but might not include other characters. For example: `SELECT * FROM customers WHERE name LIKE 'T%'`

As you can see, the `$regex` operator provides more flexibility and power than a simple `LIKE` operator.

I hope this explanation helps clarify the role of the `$regex` operator in MongoDB queries! Do you have any further questions on this topic?"
llama3.2,chroma,all-MiniLM-L6-v2,You are a creative storyteller.,18.419,0.108,"The mysterious world of MongoDB queries!

Imagine you're a detective trying to solve a crime by searching for clues. In MongoDB, the `$regex` operator is like having a superpower that allows you to search for patterns in your data.

The `$regex` operator is used to perform regular expression searches on fields in your documents. It's similar to using SQL's `LIKE` operator, but with more flexibility and power.

Let's say you have a collection of customers with names, ratings, and addresses stored in them. You want to find all customers whose name starts with ""T"" and has at least 5 stars. That's where the `$regex` operator comes in!

Here's an example query:
```javascript
db.customers.find({
  name: { ""$regex"": ""^T.*"" },
  rating: { $gte: 5 }
}, {
  _id: 0,
  name: 1,
  rating: 1
})
```
In this query:

* `^T` matches the beginning of the line, ensuring that only names starting with ""T"" are considered.
* `.*` matches any single character (except newline) zero or more times, allowing us to match any additional characters in the name.

The resulting documents will contain customers whose name starts with ""T"" and has at least 5 stars. For example:
```json
{
  ""_id"" : ObjectId(""...""),
  ""name"" : ""Thomas Johnson"",
  ""rating"" : 6
}
```
In summary, the `$regex` operator in MongoDB allows you to search for patterns in your data using regular expressions, giving you more flexibility and power than traditional `LIKE` operators."
llama3.2,chroma,all-MiniLM-L6-v2,"You are a concise and direct AI, providing brief answers.",5.349,0.107,"The `$regex` operator is used for regular expression pattern matching in MongoDB queries. It allows you to match documents based on patterns, not just exact values.

Example:
```javascript
data = mflix.find({""title"": {""$regex"": ""^T.*""}})
```
This query matches movies with titles starting with the letter ""T""."

Chunk Size,Overlap,Speed (s),Memory (MB),Total Chunks,Resulting Documents
200,0,15.086692094802856,1.765092,295,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_ICS 46 Spring 2022 | News | Course Reference | Schedule | Project Guide | Notes and Examples | Reinforcement Exercises | Grade Calculator | About Alex ICS 46 Spring 2022 Notes and Examples: AVL Trees Why we must care about binary search tree balancing We've seen previously that the performance characteristics of binary search trees can vary rather wildly, and that they're mainly dependent on the shape of the tree, with the height of the tree being the key determining factor. By definition, binary search trees restrict what keys are allowed to present in which nodes smaller keys have to be in left subtrees and larger keys in right subtrees but they specify no restriction on the tree's shape, meaning that both of these are perfectly legal binary search trees containing the keys 1, 2, 3, 4, 5, 6, and 7. Yet, while both of these are legal, one is better than the other, because the height of the first tree (called a perfect binary tree) is smaller than the height of the second (called a degenerate tree). These two shapes represent the two extremes the best and worst possible shapes for a binary search tree containing seven keys. - 0.252324342728"
200,50,17.01505994796753,1.772147,323,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_ICS 46 Spring 2022 | News | Course Reference | Schedule | Project Guide | Notes and Examples | Reinforcement Exercises | Grade Calculator | About Alex ICS 46 Spring 2022 Notes and Examples: AVL Trees Why we must care about binary search tree balancing We've seen previously that the performance characteristics of binary search trees can vary rather wildly, and that they're mainly dependent on the shape of the tree, with the height of the tree being the key determining factor. By definition, binary search trees restrict what keys are allowed to present in which nodes smaller keys have to be in left subtrees and larger keys in right subtrees but they specify no restriction on the tree's shape, meaning that both of these are perfectly legal binary search trees containing the keys 1, 2, 3, 4, 5, 6, and 7. Yet, while both of these are legal, one is better than the other, because the height of the first tree (called a perfect binary tree) is smaller than the height of the second (called a degenerate tree). These two shapes represent the two extremes the best and worst possible shapes for a binary search tree containing seven keys. - 0.252324342728"
200,100,20.475207328796387,1.795304,376,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
500,0,14.833053827285767,1.767845,258,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
500,50,14.931650161743164,1.794184,259,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
500,100,15.149008989334106,1.690236,262,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
1000,0,14.584931135177612,1.725903,249,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
1000,50,14.568686962127686,1.746479,249,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
1000,100,14.55086612701416,1.733892,249,"doc::02 - Foundations.pdf_page_12_chunk_Something with Fast Insert and Fast Search? - Binary Search Tree - a binary tree where every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent. 13 Image from: https://courses.grainger.illinois.edu/cs225/sp2019/notes/bst/ - 0.166970312595
doc::C12-bst.pdf_page_0_chunk_Chapter 12: Binary Search Trees A binary search tree is a binary tree with a special property called the BST-property, which is given as follows: For all nodes x and y, if y belongs to the left subtree of x, then the key at y is less than the key at x, and if y belongs to the right subtree of x, then the key at y is greater than the key at x. We will assume that the keys of a BST are pairwise distinct. Each node has the following attributes: p, left, and right, which are pointers to the parent, the left child, and the right child, respectively, and key, which is key stored at the node. 1 - 0.196106314659
doc::ICS 46 Spring 2022, Notes and Examples_ AVL Trees.pdf_page_0_chunk_time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be (log n), with a commensurate effect on performance. - 0.230523705482
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_0_chunk_as LRU. Figure 12.6.1 shows a B-tree of order four. Each node contains up to three keys, and internal nodes have up to four children. Figure 12.6.1: A B-tree of order four. Search in a B-tree is a generalization of search in a 2-3 tree. It is an alternating two-step process, beginning with the root node of the B- tree. 1. Perform a binary search on the records in the current node. If a record with the search key is found, then return that record. If the current node is a leaf node and the key is not found, then report an unsuccessful search. m m/2 m 24 15 20 33 45 48 10 12 18 21 23 30 30 38 47 50 52 60 - 0.244145333767
doc::12.6. B-Trees  CS3 Data Structures & Algorithms.pdf_page_3_chunk_children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77 A 89 B 98 A 127 V 25 T 39 F 98 77 B+ B+ - 0.251344740391"
